<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit


// functions

func album (name: String) {
    print("album is \(name)")
}

album(name: "The White Album")

func albumRelease(name: String, year: Int) {
    print("\(name) was released in \(year)")
}

albumRelease(name: "Lala", year: 2006)

func countLetters(in str: String) {
    print("The string \(str) has \(str.count) letters")
}

countLetters(in: "Hello")

func countLettersInString(_ str: String) {
    print("The string \(str) has \(str.count) letters")
}

countLettersInString("Hello")

func albumIsTaylors(name: String) -&gt; Bool {
    if name == "Taylor Swift" { return true}
    if name == "Fearless" {return true}
    
    return false
}

if albumIsTaylors(name: "Fearless") {
    print("Yep")
} else {
    print ("Who dat")
}

// optionals

func getHatersStatus(weather: String) -&gt; String? {
    if weather == "Sunny" {
        return nil
    } else {
        return "Hate"
    }
}

var status: String?
status = getHatersStatus(weather: "Sunny")
// var status = getHatersStatus(weather: "Sunny")

if let unwrappedStatus = status {
    // non optional string
} else {
    //
}

func takeHaterAction(status: String) {
    if status == "Hate" {
        print("Hating")
    }
}

if let haterStatus = getHatersStatus(weather: "rainy") {
    takeHaterAction(status: haterStatus)
}

// forced unwrapping

func yearAlbumReleased(name: String) -&gt; Int? {
    if name == "Lala" {return 2006}
    return nil
}

var year = yearAlbumReleased(name: "Lala")

if year == nil {
    print("error")
}else {
    print("\(year)") // prints wrapped optional
    print("\(year!)") // will crash if nil
}

// optional chaining

func albumByYear(year: Int) -&gt; String? {
    switch year {
    case 2006: return "lalala"
    case 2008: return "peepeepoo"
    default: return nil
    }
}

let album = albumByYear(year: 2006)?.uppercased()
print("The album is \(album!)")

let str = "Hellow world"
print(str.uppercased())

let album2 = albumByYear(year: 2202) ?? "Poopoo"
print(album2) // no need to unwrap optional or crash from nil

// enums

func getHaters(weather: WeatherType) -&gt; String? {
    switch weather {
    case .sun:
        return nil
    case .cloud, .wind:
        return "no"
    case .rain:
        return "hate"
    case .snow:
        return nil
    }
}

enum WeatherType {
    case sun
    case cloud
    case rain
    case wind
    case snow
}

getHaters(weather: .cloud)

enum Weather {
    case sun
    case cloud
    case rain
    case wind(speed: Int)
    case snow
}

func getStatus(weather: Weather) -&gt; String? {
    switch weather {
    case .sun:
        return nil
    case .wind(let speed) where  speed &lt; 10:
        return "meh"
    case .cloud, .wind, .rain, .snow:
        return "nope"
    }
}

// structs

struct Person {
    var cloths: String
    var shoes: String
    
    func describe() {
        print("Wearing \(cloths) with \(shoes)")
    }
}

let brandon = Person(cloths: "Jacket", shoes: "Boots")
let eleanor = Person(cloths: "Pajamas", shoes: "none")

print(brandon.shoes)
print(eleanor.cloths)

var copy = brandon
copy.shoes = "nope"

print(copy.shoes)
print(brandon.shoes)
brandon.describe()

// classes

class PersonClass {
    var clothes: String
    var shoes: String
    
    init(clothes: String, shoes: String) {
        self.clothes = clothes
        self.shoes = shoes
    }
}

class Singer {
    var name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    
    func sing() {
        print("lalala")
    }
}

var foo = Singer(name: "Poop", age: 25)
foo.sing()

class CountrySinger: Singer {
    override func sing() {
        print("shit shit shit")
    }
}

class MetalSinger: Singer {
    var level: Int
    init(name: String, age: Int, level: Int) {
        self.level = level
        super.init(name: name, age: age)
    }
    
    override func sing() {
        print("WAAAAAAA")
    }
}

var shitty = CountrySinger(name: "Poop", age: 23)
shitty.sing()

var ok = MetalSinger(name: "Dood", age: 232, level: 123)
ok.sing()
</string>
			<key>ModifiedRange</key>
			<string>{0, 4053}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
